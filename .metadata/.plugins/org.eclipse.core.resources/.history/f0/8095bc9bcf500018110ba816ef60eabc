package function;
import java.util.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;

import org.omg.CORBA.portable.ValueFactory;

import java.security.*;

public class AES {
	String password="123456";
	KeyGenerator keygen;
	String algorithm = "AES";
	public void Encrypt(String in_name,String out_name)
	{
		try{
			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(in_name)));
			StringBuffer buffer = new StringBuffer();
			String clear="";
			while((clear=reader.readLine()) != null){
				buffer.append(clear);
			}
			reader.close();
			clear = buffer.toString();
			//start the encrypt
			keygen = KeyGenerator.getInstance(algorithm); 
			keygen.init(128, new SecureRandom(password.getBytes()));
			SecretKey key= keygen.generateKey();
			byte[] enCodeFormat = key.getEncoded();
			SecretKeySpec secretKey = new SecretKeySpec(enCodeFormat, algorithm);
			Cipher cipher=Cipher.getInstance(algorithm);
			cipher.init(Cipher.ENCRYPT_MODE, secretKey);
			byte[] cipertext = cipher.doFinal(clear.getBytes());
			
			FileOutputStream output = new FileOutputStream(new File(out_name));
			output.write(cipertext);
			output.close();
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public void Decrypt(String in_name,String out_name)
	{
		try{
			FileInputStream inputStream = new FileInputStream(new File(in_name));
			//ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
			int size=0;
			byte[] cipertext = new byte[2048];
			while((size = inputStream.read(cipertext))!=-1){
				
			}
			inputStream.close();
			keygen = KeyGenerator.getInstance("AES");
	        keygen.init(128, new SecureRandom(password.getBytes()));
	        SecretKey secretKey = keygen.generateKey();
	        byte[] enCodeFormat = secretKey.getEncoded();
	        SecretKeySpec key = new SecretKeySpec(enCodeFormat, "AES");
	        Cipher cipher = Cipher.getInstance("AES");// 创建密码器
	        cipher.init(Cipher.DECRYPT_MODE, key);// 初始化
	        byte[] result = cipher.doFinal(cipertext);
	        
	        FileOutputStream out = new FileOutputStream(new File(out_name));
	        out.write(result);
	        out.close();
	    }catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public static void main(String args[]){
		System.out.println("Select the running mode :");
		System.out.println("1.Encrypt");
		System.out.println("2.Decrypt");
		AES aes = new AES();
		Scanner scan = new Scanner(System.in);
		int mode = scan.nextInt();
		switch (mode) {
		case 1:{
			System.out.println("input the clear document");
			String input = scan.nextLine();
			System.out.println("Name the ciper file");
			String output = scan.nextLine();
			aes.Encrypt(input, output);
			break;
		}
		case 2:{
			System.out.println("input the ciper document");
			String input = scan.nextLine();
			System.out.println("Name the clear file");
			String output = scan.nextLine();
			aes.Decrypt(input, output);
			break;
		}
		default:
			break;
		}
	}
}
